***************
*** 1924,1934 ****
  function node_get_recent($number = 10) {
    $query = db_select('node', 'n');
  
-   if (!user_access('bypass node access')) {
-     // If the user is able to view their own unpublished nodes, allow them
-     // to see these in addition to published nodes. Check that they actually
-     // have some unpublished nodes to view before adding the condition.
-     if (user_access('view own unpublished content') && $own_unpublished = db_query('SELECT nid FROM {node} WHERE uid = :uid AND status = :status', array(':uid' => $GLOBALS['user']->uid, ':status' => NODE_NOT_PUBLISHED))->fetchCol()) {
        $query->condition(db_or()
          ->condition('n.status', NODE_PUBLISHED)
          ->condition('n.nid', $own_unpublished, 'IN')
--- 1927,1940 ----
  function node_get_recent($number = 10) {
    $query = db_select('node', 'n');
  
+   if (!user_access('bypass node access') && !user_access('view any unpublished content')) {
+     // If the user is able to view unpublished nodes, allow them to see these
+     // in addition to published nodes. Check that they actually have some
+     // unpublished nodes to view before adding the condition.
+     // Note: this query still ignores unpublished by type permissions.
+     // See: https://github.com/backdrop/backdrop-issues/issues/146.
+     $own_unpublished = db_query('SELECT nid FROM {node} WHERE uid = :uid AND status = :status', array(':uid' => $GLOBALS['user']->uid, ':status' => NODE_NOT_PUBLISHED))->fetchCol();
+     if (user_access('view own unpublished content') && $own_unpublished) {
        $query->condition(db_or()
          ->condition('n.status', NODE_PUBLISHED)
          ->condition('n.nid', $own_unpublished, 'IN')
***************
*** 2934,2940 ****
   *   new ones. Defaults to TRUE.
   */
  function node_access_acquire_grants(Node $node, $delete = TRUE) {
-   $grants = module_invoke_all('node_access_records', $node);
    // Let modules alter the grants.
    backdrop_alter('node_access_records', $grants, $node);
    // If no grants are set and the node is published, then use the default grant.
--- 2946,2982 ----
   *   new ones. Defaults to TRUE.
   */
  function node_access_acquire_grants(Node $node, $delete = TRUE) {
+   // We only care about the node if is unpublished. If not, it is
+   // treated just like any other node and we completely ignore it.
+   $grants = array();
+   if ($node->status == 0) {
+     // Unpublished nodes should be viewable to all editors.
+     $grants[] = array(
+       'realm' => 'view_unpublished_content',
+       'gid' => 1,
+       'grant_view' => 1,
+       'grant_update' => 0,
+       'grant_delete' => 0,
+       'priority' => 0,
+     );
+     $grants[] = array(
+       'realm' => 'view_unpublished_' . $node->type . '_content',
+       'gid' => 1,
+       'grant_view' => 1,
+       'grant_update' => 0,
+       'grant_delete' => 0,
+       'priority' => 0,
+     );
+     $grants[] = array(
+       'realm' => 'view_unpublished_author',
+       'gid' => $node->uid,
+       'grant_view' => 1,
+       'grant_update' => 0,
+       'grant_delete' => 0,
+       'priority' => 0,
+     );
+   }
+   $grants = array_merge($grants, module_invoke_all('node_access_records', $node));
    // Let modules alter the grants.
    backdrop_alter('node_access_records', $grants, $node);
    // If no grants are set and the node is published, then use the default grant.
